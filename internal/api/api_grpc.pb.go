// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortLinkServiceClient is the client API for ShortLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortLinkServiceClient interface {
	CreateLink(ctx context.Context, in *RequestCreateLink, opts ...grpc.CallOption) (*ResponseCreateLink, error)
	GetLink(ctx context.Context, in *RequestGetLink, opts ...grpc.CallOption) (*ResponseGetLink, error)
}

type shortLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortLinkServiceClient(cc grpc.ClientConnInterface) ShortLinkServiceClient {
	return &shortLinkServiceClient{cc}
}

func (c *shortLinkServiceClient) CreateLink(ctx context.Context, in *RequestCreateLink, opts ...grpc.CallOption) (*ResponseCreateLink, error) {
	out := new(ResponseCreateLink)
	err := c.cc.Invoke(ctx, "/ShortLinkService/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortLinkServiceClient) GetLink(ctx context.Context, in *RequestGetLink, opts ...grpc.CallOption) (*ResponseGetLink, error) {
	out := new(ResponseGetLink)
	err := c.cc.Invoke(ctx, "/ShortLinkService/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortLinkServiceServer is the server API for ShortLinkService service.
// All implementations should embed UnimplementedShortLinkServiceServer
// for forward compatibility
type ShortLinkServiceServer interface {
	CreateLink(context.Context, *RequestCreateLink) (*ResponseCreateLink, error)
	GetLink(context.Context, *RequestGetLink) (*ResponseGetLink, error)
}

// UnimplementedShortLinkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShortLinkServiceServer struct {
}

func (UnimplementedShortLinkServiceServer) CreateLink(context.Context, *RequestCreateLink) (*ResponseCreateLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedShortLinkServiceServer) GetLink(context.Context, *RequestGetLink) (*ResponseGetLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}

// UnsafeShortLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortLinkServiceServer will
// result in compilation errors.
type UnsafeShortLinkServiceServer interface {
	mustEmbedUnimplementedShortLinkServiceServer()
}

func RegisterShortLinkServiceServer(s grpc.ServiceRegistrar, srv ShortLinkServiceServer) {
	s.RegisterService(&ShortLinkService_ServiceDesc, srv)
}

func _ShortLinkService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShortLinkService/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).CreateLink(ctx, req.(*RequestCreateLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortLinkService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortLinkServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShortLinkService/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortLinkServiceServer).GetLink(ctx, req.(*RequestGetLink))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortLinkService_ServiceDesc is the grpc.ServiceDesc for ShortLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ShortLinkService",
	HandlerType: (*ShortLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _ShortLinkService_CreateLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _ShortLinkService_GetLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
